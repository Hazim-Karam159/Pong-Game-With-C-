#include <graphics.h>
#include <conio.h>
#include <dos.h>  // For delay()

// Constants for screen and game dimensions
#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define PADDLE_WIDTH 10
#define PADDLE_HEIGHT 80
#define BALL_SIZE 10
#define MARGIN 50

// Paddle class
class Paddle {
public:
    int x, y;

    Paddle(int startX, int startY) {
        x = startX;
        y = startY;
    }

    void draw() {
        bar(x, y, x + PADDLE_WIDTH, y + PADDLE_HEIGHT);
    }

    void moveUp() {
        if (y > MARGIN) y -= 10;
    }

    void moveDown() {
        if (y < SCREEN_HEIGHT - PADDLE_HEIGHT - MARGIN) y += 10;
    }

    void moveLeft() {
        if (x > MARGIN) x -= 10;
    }

    void moveRight(int boundary) {
        if (x + PADDLE_WIDTH < boundary) x += 10;
    }

    void restrictToHalf(int midX, int isLeft) {
        if (isLeft) {
            if (x + PADDLE_WIDTH > midX) x = midX - PADDLE_WIDTH;
        } else {
            if (x < midX) x = midX;
        }
    }
};

// Ball class
class Ball {
public:
    int x, y;
    int dx, dy;

    Ball(int startX, int startY) {
        x = startX;
        y = startY;
        dx = 4;  // Slower ball speed in x-direction
        dy = 4;  // Slower ball speed in y-direction
    }

    void draw() {
       //setcolor(RED);
        //bar(x, y, x + BALL_SIZE, y + BALL_SIZE);
       setcolor(RED);  // تعيين اللون الأحمر
        fillellipse(x + BALL_SIZE / 2, y + BALL_SIZE / 2, BALL_SIZE / 2, BALL_SIZE / 2);
    }


    void move() {
        x += dx;
        y += dy;

        // Bounce on top/bottom walls
        if (y <= MARGIN || y + BALL_SIZE >= SCREEN_HEIGHT - MARGIN) {
            dy = -dy;
        }
    }

    void reset(int startX, int startY, int direction) {
        x = startX;
        y = startY;
        if (direction == 1) {
            dx = 4;  // Ball goes towards player 2
        } else {
            dx = -4; // Ball goes towards player 1
        }
        dy = 4;  // Reset to slower speed
    }

    // Check collision with paddles
    void checkCollision(Paddle player1, Paddle player2) {
        // Collision with Player 1
        if (x <= player1.x + PADDLE_WIDTH && y + BALL_SIZE >= player1.y && y <= player1.y + PADDLE_HEIGHT) {
            dx = -dx;  // Reverse direction
            x = player1.x + PADDLE_WIDTH;  // Prevent getting stuck inside paddle
        }
        // Collision with Player 2
        if (x + BALL_SIZE >= player2.x && y + BALL_SIZE >= player2.y && y <= player2.y + PADDLE_HEIGHT) {
            dx = -dx;  // Reverse direction
            x = player2.x - BALL_SIZE;  // Prevent getting stuck inside paddle
        }
    }

    int checkScore(int leftEdge, int rightEdge) {
        if (x <= leftEdge) return 2;  // Player 2 scores
        if (x + BALL_SIZE >= rightEdge) return 1;  // Player 1 scores
        return 0;
    }
};

// Function to draw the court
void drawCourt() {
    rectangle(MARGIN, MARGIN, SCREEN_WIDTH - MARGIN, SCREEN_HEIGHT - MARGIN);  // Outer court boundary
    line(SCREEN_WIDTH / 2, MARGIN, SCREEN_WIDTH / 2, SCREEN_HEIGHT - MARGIN);  // Middle line
}

// Function to convert integer to string (without using itoa or sprintf)
void intToStr(int num, char* str) {
    int i = 0;
    int temp = num;
    if (num == 0) {
        str[i++] = '0';
        str[i] = '\0';
        return;
    }

    // Extract digits in reverse order
    while (temp > 0) {
        str[i++] = (temp % 10) + '0';  // Get the last digit and convert to character
        temp /= 10;
    }

    str[i] = '\0';

    // Reverse the string to get the correct order
    int start = 0;
    int end = i - 1;
    while (start < end) {
        char tempChar = str[start];
        str[start] = str[end];
        str[end] = tempChar;
        start++;
        end--;
    }
}

// Function to display the score with fixed font size
void displayScore(int player1Score, int player2Score) {
    char scoreText[50];
    setcolor(WHITE);
    settextstyle(SIMPLEX_FONT, HORIZ_DIR, 1);  // Use simple font with fixed size

    // Convert player 1 score to string
    intToStr(player1Score, scoreText);
    outtextxy(SCREEN_WIDTH / 4 - 40, 10, "Player 1: ");
    setcolor(RED);
    outtextxy(SCREEN_WIDTH / 4 + 60, 10, scoreText);
    setcolor(WHITE);

    // Convert player 2 score to string
    intToStr(player2Score, scoreText);
    outtextxy(SCREEN_WIDTH * 3 / 4 - 40, 10, "Player 2: ");
    setcolor(GREEN);
    outtextxy(SCREEN_WIDTH * 3 / 4 + 60, 10, scoreText);
    setcolor(WHITE);
}

// Function to reset the game after a player wins
void resetGame(Paddle &player1, Paddle &player2, Ball &ball, int &player1Score, int &player2Score) {
    player1Score = 0;
    player2Score = 0;
    player1.y = SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2;
    player2.y = SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2;
    ball.reset(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 1);  // Start ball towards player 2
}

void displayMenu(int &curr) {
    cleardevice();  // Clear the screen before drawing the menu
    setcolor(WHITE);  // Set the default text color to white
    settextstyle(SIMPLEX_FONT, HORIZ_DIR, 2);  // Set text size for menu

    // Draw the menu options only once
    outtextxy(SCREEN_WIDTH / 2 - 60, SCREEN_HEIGHT / 4, "1. New Game");
    outtextxy(SCREEN_WIDTH / 2 - 60, SCREEN_HEIGHT / 4 + 40, "2. Score");
    outtextxy(SCREEN_WIDTH / 2 - 60, SCREEN_HEIGHT / 4 + 80, "3. Exit");

    // Now highlight the current selection (only the selected option should be in red)
    setcolor(RED);  // Set color for the highlighted option
    if (curr == 1) {
        // Highlight 'New Game'
        outtextxy(SCREEN_WIDTH / 2 - 60, SCREEN_HEIGHT / 4, "1. New Game");
    } else if (curr == 2) {
        // Highlight 'Score'
        outtextxy(SCREEN_WIDTH / 2 - 60, SCREEN_HEIGHT / 4 + 40, "2. Score");
    } else if (curr == 3) {
        // Highlight 'Exit'
        outtextxy(SCREEN_WIDTH / 2 - 60, SCREEN_HEIGHT / 4 + 80, "3. Exit");
    }
}




int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "D:/BGI/");  // Ensure correct path to your BGI folder

    Paddle player1(MARGIN + 30, SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2);  // Left paddle
    Paddle player2(SCREEN_WIDTH - MARGIN - PADDLE_WIDTH - 30, SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2);  // Right paddle
    Ball ball(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);  // Ball at center

    int player1Score = 0;
    int player2Score = 0;
    int curr = 1;  // Current menu selection

    while (1) {
        displayMenu(curr);
        char ch = getch();

        if (ch == 27) break;  // ESC key to exit

        if (ch == 72) {  // Arrow up
            curr--;
            if (curr < 1) curr = 3;
        } else if (ch == 80) {  // Arrow down
            curr++;
            if (curr > 3) curr = 1;
        }

        if (ch == 13) {  // Enter key
            if (curr == 1) {  // New Game
                while (1) {
                    if (kbhit()) {
                        char ch = getch();
                        if (ch == 27) break;  // ESC key to exit

                        // Player 1 controls
                        if (ch == 72) player1.moveUp();       // Up arrow
                        else if (ch == 80) player1.moveDown(); // Down arrow
                        else if (ch == 75) player1.moveLeft(); // Left arrow
                        else if (ch == 77) player1.moveRight(SCREEN_WIDTH / 2); // Right arrow

                        // Player 2 controls (WASD)
                        if (ch == 'w' || ch == 'W') player2.moveUp();
                        else if (ch == 's' || ch == 'S') player2.moveDown();
                        else if (ch == 'a' || ch == 'A') player2.moveLeft();
                        else if (ch == 'd' || ch == 'D') player2.moveRight(SCREEN_WIDTH - MARGIN);

                        // Restrict players to their own half
                        player1.restrictToHalf(SCREEN_WIDTH / 2, 1);
                        player2.restrictToHalf(SCREEN_WIDTH / 2, 0);
                    }

                    ball.move();
                    ball.checkCollision(player1, player2);  // Check for paddle collision

                    int scored = ball.checkScore(MARGIN, SCREEN_WIDTH - MARGIN);
                    if (scored == 1) {
                        ++player1Score;
                        ball.reset(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 2);  // Start ball towards player 1
                    } else if (scored == 2) {
                        ++player2Score;
                        ball.reset(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 1);  // Start ball towards player 2
                    }

                   // Check for game win condition
// Check for game win condition
// Check for game win condition
if (player1Score == 5) {
    setcolor(RED);  // Set color for Player 1 (Red)
    settextstyle(BOLD_FONT, HORIZ_DIR, 3);  // Use bold font with the same size
    int textWidth = textwidth("Player 1 Wins!");  // Get the width of the text
    int textHeight = textheight("Player 1 Wins!");  // Get the height of the text
    outtextxy((SCREEN_WIDTH - textWidth) / 2, (SCREEN_HEIGHT - textHeight) / 2, "Player 1 Wins!");
    delay(3000);
    resetGame(player1, player2, ball, player1Score, player2Score);  // Reset the game
    break;  // Exit the game loop and return to the main menu
} else if (player2Score == 5) {
    setcolor(YELLOW);  // Set color for Player 2 (Blue)
    settextstyle(BOLD_FONT, HORIZ_DIR, 3);  // Use bold font with the same size
    int textWidth = textwidth("Player 2 Wins!");  // Get the width of the text
    int textHeight = textheight("Player 2 Wins!");  // Get the height of the text
    outtextxy((SCREEN_WIDTH - textWidth) / 2, (SCREEN_HEIGHT - textHeight) / 2, "Player 2 Wins!");
    delay(3000);
    resetGame(player1, player2, ball, player1Score, player2Score);  // Reset the game
    break;  // Exit the game loop and return to the main menu
}



                    // Clear the screen and draw everything
                    cleardevice();
                    drawCourt();
                    player1.draw();
                    player2.draw();
                    ball.draw();
                    displayScore(player1Score, player2Score);

                    delay(20);  // Control game speed
                }
            } else if (curr == 2) {  // Display Score
    cleardevice();
    displayScore(player1Score, player2Score);  // Show the score

    // Wait for ESC key press to return to menu
    while (1) {
        char ch = getch();
        if (ch == 27) {  // ESC key pressed
            break;  // Exit the loop and return to the main menu
        }
	} }else if (curr == 3) {  // Exit
                break;
            }
        }
    }

    closegraph();
}
